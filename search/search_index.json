{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"advanced/","text":"Advanced Usage Configuration File You can configure the way jrnl behaves in a configuration file. By default, this is ~/.config/jrnl/jrnl.yaml . If you have the XDG_CONFIG_HOME variable set, the configuration file will be saved as $XDG_CONFIG_HOME/jrnl/jrnl.yaml . Note On Windows, the configuration file is typically found at %USERPROFILE%\\.config\\jrnl\\jrnl.yaml . The configuration file is a YAML file with the following options and can be edited with a plain text editor. Note Backup your journal and config file before editing. Changes to the config file can have destructive effects on your journal! journals paths to your journal files editor if set, executes this command to launch an external editor for writing your entries, e.g. vim . Some editors require special options to work properly, see FAQ <recipes> for details. encrypt if true , encrypts your journal using AES. tagsymbols Symbols to be interpreted as tags. (See note below) default_hour and default_minute if you supply a date, such as last thursday , but no specific time, the entry will be created at this time timeformat how to format the timestamps in your journal, see the python docs for reference highlight if true , tags will be highlighted in cyan. linewrap controls the width of the output. Set to false if you don't want to wrap long lines. colors dictionary that controls the colors used to display journal entries. It has four subkeys, which are: body , date , tags , and title . Current valid values are: BLACK , RED , GREEN , YELLOW , BLUE , MAGENTA , CYAN , WHITE , and NONE . colorama.Fore is used for colorization, and you can find the docs here . To disable colored output, set the value to NONE . If you set the value of any color subkey to an invalid color, no color will be used. display_format specifies formatter to use, formatters available are: boxed , fancy , json , markdown , md , tags , text , txt , xml , or yaml . Note Although it seems intuitive to use the # character for tags, there's a drawback: on most shells, this is interpreted as a meta-character starting a comment. This means that if you type jrnl Implemented endless scrolling on the #frontend of our website. your bash will chop off everything after the # before passing it to jrnl . To avoid this, wrap your input into quotation marks like this: jrnl \"Implemented endless scrolling on the #frontend of our website.\" Or use the built-in prompt or an external editor to compose your entries. Multiple journal files You can configure jrnl to use with multiple journals (eg. private and work ) by defining more journals in your jrnl.yaml , for example: journals: default: ~\\journal.txt work: ~\\work.txt The default journal gets created the first time you start jrnl Now you can access the work journal by using jrnl work instead of jrnl , eg. jrnl work at 10am: Meeting with @Steve jrnl work -n 3 will both use ~/work.txt , while jrnl -n 3 will display the last three entries from ~/journal.txt (and so does jrnl default -n 3 ). You can also override the default options for each individual journal. If your jrnl.yaml looks like this: encrypt: false journals: default: ~/journal.txt work: journal: ~/work.txt encrypt: true food: ~/my_recipes.txt Your default and your food journals won't be encrypted, however your work journal will! You can override all options that are present at the top level of jrnl.yaml , just make sure that at the very least you specify a journal: ... key that points to the journal file of that journal. Note Changing encrypt to a different value will not encrypt or decrypt your journal file, it merely says whether or not your journal is encrypted. Hence manually changing this option will most likely result in your journal file being impossible to load. Known Issues Unicode on Windows The Windows shell prior to Windows 7 has issues with unicode encoding. To use non-ascii characters, first tweak Python to recognize the encoding by adding 'cp65001': 'utf_8' , to Lib/encoding/aliases.py . Then, change the codepage with chcp 1252 before using jrnl . (Related issue: #486 )","title":"Advanced Usage"},{"location":"advanced/#advanced-usage","text":"","title":"Advanced Usage"},{"location":"advanced/#configuration-file","text":"You can configure the way jrnl behaves in a configuration file. By default, this is ~/.config/jrnl/jrnl.yaml . If you have the XDG_CONFIG_HOME variable set, the configuration file will be saved as $XDG_CONFIG_HOME/jrnl/jrnl.yaml . Note On Windows, the configuration file is typically found at %USERPROFILE%\\.config\\jrnl\\jrnl.yaml . The configuration file is a YAML file with the following options and can be edited with a plain text editor. Note Backup your journal and config file before editing. Changes to the config file can have destructive effects on your journal! journals paths to your journal files editor if set, executes this command to launch an external editor for writing your entries, e.g. vim . Some editors require special options to work properly, see FAQ <recipes> for details. encrypt if true , encrypts your journal using AES. tagsymbols Symbols to be interpreted as tags. (See note below) default_hour and default_minute if you supply a date, such as last thursday , but no specific time, the entry will be created at this time timeformat how to format the timestamps in your journal, see the python docs for reference highlight if true , tags will be highlighted in cyan. linewrap controls the width of the output. Set to false if you don't want to wrap long lines. colors dictionary that controls the colors used to display journal entries. It has four subkeys, which are: body , date , tags , and title . Current valid values are: BLACK , RED , GREEN , YELLOW , BLUE , MAGENTA , CYAN , WHITE , and NONE . colorama.Fore is used for colorization, and you can find the docs here . To disable colored output, set the value to NONE . If you set the value of any color subkey to an invalid color, no color will be used. display_format specifies formatter to use, formatters available are: boxed , fancy , json , markdown , md , tags , text , txt , xml , or yaml . Note Although it seems intuitive to use the # character for tags, there's a drawback: on most shells, this is interpreted as a meta-character starting a comment. This means that if you type jrnl Implemented endless scrolling on the #frontend of our website. your bash will chop off everything after the # before passing it to jrnl . To avoid this, wrap your input into quotation marks like this: jrnl \"Implemented endless scrolling on the #frontend of our website.\" Or use the built-in prompt or an external editor to compose your entries.","title":"Configuration File"},{"location":"advanced/#multiple-journal-files","text":"You can configure jrnl to use with multiple journals (eg. private and work ) by defining more journals in your jrnl.yaml , for example: journals: default: ~\\journal.txt work: ~\\work.txt The default journal gets created the first time you start jrnl Now you can access the work journal by using jrnl work instead of jrnl , eg. jrnl work at 10am: Meeting with @Steve jrnl work -n 3 will both use ~/work.txt , while jrnl -n 3 will display the last three entries from ~/journal.txt (and so does jrnl default -n 3 ). You can also override the default options for each individual journal. If your jrnl.yaml looks like this: encrypt: false journals: default: ~/journal.txt work: journal: ~/work.txt encrypt: true food: ~/my_recipes.txt Your default and your food journals won't be encrypted, however your work journal will! You can override all options that are present at the top level of jrnl.yaml , just make sure that at the very least you specify a journal: ... key that points to the journal file of that journal. Note Changing encrypt to a different value will not encrypt or decrypt your journal file, it merely says whether or not your journal is encrypted. Hence manually changing this option will most likely result in your journal file being impossible to load.","title":"Multiple journal files"},{"location":"advanced/#known-issues","text":"","title":"Known Issues"},{"location":"advanced/#unicode-on-windows","text":"The Windows shell prior to Windows 7 has issues with unicode encoding. To use non-ascii characters, first tweak Python to recognize the encoding by adding 'cp65001': 'utf_8' , to Lib/encoding/aliases.py . Then, change the codepage with chcp 1252 before using jrnl . (Related issue: #486 )","title":"Unicode on Windows"},{"location":"encryption/","text":"Encryption A Note on Security While jrnl follows best practices, total security is never possible in the real world. There are a number of ways that people can at least partially compromise your jrnl data. See the Privacy and Security page for more information. Encrypting and Decrypting Existing plain text journal files can be encrypted using the --encrypt command: jrnl --encrypt [FILENAME] You can then enter a new password, and the unencrypted file will replaced with the new encrypted file. This command also works to change the password for a journal file that is already encrypted. jrnl will prompt you for the current password and then new password. Conversely, jrnl --decrypt [FILENAME] replaces the encrypted journal file with a plain text file. You can also specify a filename, e.g., jrnl --decrypt plain_text_copy.txt , to leave the original encrypted file untouched and create a new plain text file next to it. Storing Passwords in Your Keychain Nobody can recover or reset your jrnl password. If you lose it, your data will be inaccessible forever. For this reason, when encrypting a journal, jrnl asks whether you would like to store the password in your system's keychain. An added benefit is that you will not need to enter the password when interacting with the journal file. If you don't initially store the password in your keychain but decide to do so later---or if you want to store it in one computer's keychain but not in another computer's---you can run jrnl --encrypt on an encrypted journal and use the same password again. This will trigger the keychain storage prompt. Manual Decryption The easiest way to decrypt your journal is with jrnl --decrypt , but you could also decrypt your journal manually if needed. To do this, you can use any program that supports the AES algorithm (specifically AES-CBC), and you'll need the following relevant information for decryption: Key: The key used for encryption is the SHA-256 hash of your password. Initialization vector (IV): The IV is stored in the first 16 bytes of your encrypted journal file. The actual text of the journal (everything after the first 16 bytes in the encrypted journal file) is encoded in UTF-8 and padded according to PKCS#7 before being encrypted. If you'd like an example of what this might look like in script form, please see below for some examples of Python scripts that you could use to manually decrypt your journal. Note These are only examples, and are only here to illustrate that your journal files will still be recoverable even if jrnl isn't around anymore. Please use jrnl --decrypt if available. Example for jrnl v2 files : #!/usr/bin/env python3 \"\"\" Decrypt a jrnl v2 encrypted journal. Note: the `cryptography` module must be installed (you can do this with something like `pip3 install crytography`) \"\"\" import base64 import getpass from pathlib import Path from cryptography.fernet import Fernet from cryptography.hazmat.backends import default_backend from cryptography.hazmat.primitives import hashes from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC filepath = input(\"journal file path: \") password = getpass.getpass(\"Password: \") with open(Path(filepath),\"rb\") as f: ciphertext = f.read() password = password.encode(\"utf-8\") kdf = PBKDF2HMAC( algorithm=hashes.SHA256(), length=32, salt=b\"\\xf2\\xd5q\\x0e\\xc1\\x8d.\\xde\\xdc\\x8e6t\\x89\\x04\\xce\\xf8\", iterations=100_000, backend=default_backend(), ) key = base64.urlsafe_b64encode(kdf.derive(password)) print(Fernet(key).decrypt(ciphertext).decode('utf-8')) Example for jrnl v1 files : #!/usr/bin/env python3 \"\"\" Decrypt a jrnl v1 encrypted journal. Note: the `pycrypto` module must be installed (you can do this with something like `pip3 install pycrypto`) \"\"\" import argparse from Crypto.Cipher import AES import getpass import hashlib import sys parser = argparse.ArgumentParser() parser.add_argument(\"filepath\", help=\"journal file to decrypt\") args = parser.parse_args() pwd = getpass.getpass() key = hashlib.sha256(pwd.encode('utf-8')).digest() with open(args.filepath, 'rb') as f: ciphertext = f.read() crypto = AES.new(key, AES.MODE_CBC, ciphertext[:16]) plain = crypto.decrypt(ciphertext[16:]) plain = plain.strip(plain[-1:]) plain = plain.decode(\"utf-8\") print(plain)","title":"Encryption"},{"location":"encryption/#encryption","text":"","title":"Encryption"},{"location":"encryption/#a-note-on-security","text":"While jrnl follows best practices, total security is never possible in the real world. There are a number of ways that people can at least partially compromise your jrnl data. See the Privacy and Security page for more information.","title":"A Note on Security"},{"location":"encryption/#encrypting-and-decrypting","text":"Existing plain text journal files can be encrypted using the --encrypt command: jrnl --encrypt [FILENAME] You can then enter a new password, and the unencrypted file will replaced with the new encrypted file. This command also works to change the password for a journal file that is already encrypted. jrnl will prompt you for the current password and then new password. Conversely, jrnl --decrypt [FILENAME] replaces the encrypted journal file with a plain text file. You can also specify a filename, e.g., jrnl --decrypt plain_text_copy.txt , to leave the original encrypted file untouched and create a new plain text file next to it.","title":"Encrypting and Decrypting"},{"location":"encryption/#storing-passwords-in-your-keychain","text":"Nobody can recover or reset your jrnl password. If you lose it, your data will be inaccessible forever. For this reason, when encrypting a journal, jrnl asks whether you would like to store the password in your system's keychain. An added benefit is that you will not need to enter the password when interacting with the journal file. If you don't initially store the password in your keychain but decide to do so later---or if you want to store it in one computer's keychain but not in another computer's---you can run jrnl --encrypt on an encrypted journal and use the same password again. This will trigger the keychain storage prompt.","title":"Storing Passwords in Your Keychain"},{"location":"encryption/#manual-decryption","text":"The easiest way to decrypt your journal is with jrnl --decrypt , but you could also decrypt your journal manually if needed. To do this, you can use any program that supports the AES algorithm (specifically AES-CBC), and you'll need the following relevant information for decryption: Key: The key used for encryption is the SHA-256 hash of your password. Initialization vector (IV): The IV is stored in the first 16 bytes of your encrypted journal file. The actual text of the journal (everything after the first 16 bytes in the encrypted journal file) is encoded in UTF-8 and padded according to PKCS#7 before being encrypted. If you'd like an example of what this might look like in script form, please see below for some examples of Python scripts that you could use to manually decrypt your journal. Note These are only examples, and are only here to illustrate that your journal files will still be recoverable even if jrnl isn't around anymore. Please use jrnl --decrypt if available. Example for jrnl v2 files : #!/usr/bin/env python3 \"\"\" Decrypt a jrnl v2 encrypted journal. Note: the `cryptography` module must be installed (you can do this with something like `pip3 install crytography`) \"\"\" import base64 import getpass from pathlib import Path from cryptography.fernet import Fernet from cryptography.hazmat.backends import default_backend from cryptography.hazmat.primitives import hashes from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC filepath = input(\"journal file path: \") password = getpass.getpass(\"Password: \") with open(Path(filepath),\"rb\") as f: ciphertext = f.read() password = password.encode(\"utf-8\") kdf = PBKDF2HMAC( algorithm=hashes.SHA256(), length=32, salt=b\"\\xf2\\xd5q\\x0e\\xc1\\x8d.\\xde\\xdc\\x8e6t\\x89\\x04\\xce\\xf8\", iterations=100_000, backend=default_backend(), ) key = base64.urlsafe_b64encode(kdf.derive(password)) print(Fernet(key).decrypt(ciphertext).decode('utf-8')) Example for jrnl v1 files : #!/usr/bin/env python3 \"\"\" Decrypt a jrnl v1 encrypted journal. Note: the `pycrypto` module must be installed (you can do this with something like `pip3 install pycrypto`) \"\"\" import argparse from Crypto.Cipher import AES import getpass import hashlib import sys parser = argparse.ArgumentParser() parser.add_argument(\"filepath\", help=\"journal file to decrypt\") args = parser.parse_args() pwd = getpass.getpass() key = hashlib.sha256(pwd.encode('utf-8')).digest() with open(args.filepath, 'rb') as f: ciphertext = f.read() crypto = AES.new(key, AES.MODE_CBC, ciphertext[:16]) plain = crypto.decrypt(ciphertext[16:]) plain = plain.strip(plain[-1:]) plain = plain.decode(\"utf-8\") print(plain)","title":"Manual Decryption"},{"location":"formats/","text":"Formats jrnl supports a variety of alternate formats. These can be used to display your journal in a different manner than the jrnl default, and can even be used to pipe data from your journal for use in another program to create reports, or do whatever you want with your jrnl data. Any of these formats can be used with a search (e.g. jrnl -contains \"lorem ipsum\" --format json ) to display the results of that search in the given format, or can be used alone (e.g. jrnl --format json ) to display all entries from the selected journal. This page shows examples of all the built-in formats, but since jrnl supports adding more formats through plugins, you may have more available on your system. Please see jrnl --help for a list of which formats are available on your system. Any of these formats can be used interchangeably, and are only grouped into \"display\", \"data\", and \"report\" formats below for convenience. Display Formats These formats are mainly intended for displaying your journal in the terminal. Even so, they can still be used in the same way as any other format (like written to a file, if you choose). Pretty jrnl --format pretty # or jrnl -1 # any search This is the default format in jrnl . If no --format is given, pretty will be used. It displays the timestamp of each entry formatted to by the user config followed by the title on the same line. Then the body of the entry is shown below. This format is configurable through these values from your config file (see Advanced Usage for more details): colors body date tags title indent_character linewrap timeformat Example output : 2020-06-28 18:22 This is the first sample entry | This is the sample body text of the first sample entry. 2020-07-01 20:00 This is the second sample entry | This is the sample body text of the second sample entry, but this one has a @tag. 2020-07-02 09:00 This is the third sample entry | This is the sample body text of the third sample entry. Short jrnl --format short # or jrnl --short This will shorten entries to display only the date and title. It is essentially the pretty format but without the body of each entry. This can be useful if you have long journal entries and only want to see a list of entries that match your search. Example output : 2020-06-28 18:22 This is the first sample entry 2020-07-01 20:00 This is the second sample entry 2020-07-02 09:00 This is the third sample entry Fancy (or Boxed) jrnl --format fancy # or jrnl --format boxed This format outlines each entry with a border. This makes it much easier to tell where each entry starts and ends. It's an example of how free-form the formats can be, and also just looks kinda ~ ~fancy~ ~, if you're into that kind of thing. Example output : \u250e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e2020-06-28 18:22 \u2503 This is the first sample entry \u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555 \u2520\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524 \u2503 This is the sample body text of the first sample entry. \u2502 \u2516\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e2020-07-01 20:00 \u2503 This is the second sample entry \u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555 \u2520\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524 \u2503 This is the sample body text of the second sample entry, but this one has a @tag. \u2502 \u2516\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e2020-07-02 09:00 \u2503 This is the third sample entry \u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555 \u2520\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524 \u2503 This is the sample body text of the third sample entry. \u2502 \u2516\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 Data Formats These formats are mainly intended for piping or exporting your journal to other programs. Even so, they can still be used in the same way as any other format (like written to a file, or displayed in your terminal, if you want). JSON jrnl --format json JSON is a very handy format used by many programs and has support in nearly every programming language. There are many things you could do with JSON data. Maybe you could use jq to filter through the fields in your journal. Like this: $ j -3 --format json | jq '.entries[].date' jrnl-GFqVlfgP-py3.8 \ue73c \"2020-06-28\" \"2020-07-01\" \"2020-07-02\" Or why not create a beautiful timeline of your journal? Example output : { \"tags\": { \"@tag\": 1 }, \"entries\": [ { \"title\": \"This is the first sample entry\", \"body\": \"This is the sample body text of the first sample entry.\", \"date\": \"2020-06-28\", \"time\": \"18:22\", \"tags\": [], \"starred\": false }, { \"title\": \"This is the second sample entry\", \"body\": \"This is the sample body text of the second sample entry, but this one has a @tag.\", \"date\": \"2020-07-01\", \"time\": \"20:00\", \"tags\": [ \"@tag\" ], \"starred\": false }, { \"title\": \"This is the third sample entry\", \"body\": \"This is the sample body text of the third sample entry.\", \"date\": \"2020-07-02\", \"time\": \"09:00\", \"tags\": [], \"starred\": false } ] } Markdown jrnl --format markdown # or jrnl --format md Markdown is a simple markup language that is human readable and can be used to be rendered to other formats (html, pdf). jrnl 's README for example is formatted in markdown, then Github adds some formatting to make it look nice. The markdown format groups entries by date (first by year, then by month), and adds header markings as needed (e.g. # , ## , etc). If you already have markdown header markings in your journal, they will be incremented as necessary to make them fit under these new headers (i.e. # will become ## ). This format can be very useful, for example, to export a journal to a program that converts markdown to html to make a website or a blog from your journal. Example output : # 2020 ## June ### 2020-06-28 18:22 This is the first sample entry This is the sample body text of the first sample entry. ## July ### 2020-07-01 20:00 This is the second sample entry This is the sample body text of the second sample entry, but this one has a @tag. ### 2020-07-02 09:00 This is the third sample entry This is the sample body text of the third sample entry. Plain Text jrnl --format text # or jrnl --format txt This outputs your journal in the same plain-text format that jrnl uses to store your journal on disk. This format is particularly useful for importing and exporting journals within jrnl . You can use it, for example, to move entries from one journal to another, or to create a new journal with search results from another journal. Example output : [2020-06-28 18:22] This is the first sample entry This is the sample body text of the first sample entry. [2020-07-01 20:00] This is the second sample entry This is the sample body text of the second sample entry, but this one has a @tag. [2020-07-02 09:00] This is the third sample entry This is the sample body text of the third sample entry. XML jrnl --format xml This outputs your journal into XML format. XML is a commonly used data format and is supported by many programs and programming languages. Example output : <?xml version=\"1.0\" ?> <journal> <entries> <entry date=\"2020-06-28T18:22:00\" starred=\"\">This is the first sample entry This is the sample body text of the first sample entry.</entry> <entry date=\"2020-07-01T20:00:00\" starred=\"\"> <tag name=\"@tag\"/> This is the second sample entry This is the sample body text of the second sample entry, but this one has a @tag. </entry> <entry date=\"2020-07-02T09:00:00\" starred=\"\">*This is the third sample entry, and is starred This is the sample body text of the third sample entry.</entry> </entries> <tags> <tag name=\"@tag\">1</tag> </tags> </journal> YAML jrnl --format yaml This outputs your journal into YAML format. YAML is a commonly used data format and is supported by many programs and programming languages. Example output : title: This is the second sample entry date: 2020-07-01 20:00 starred: False tags: tag This is the sample body text of the second sample entry, but this one has a @tag. Report formats Since formats use your journal data and display it in different ways, they can also be used to create reports. Tags jrnl --format tags # or jrnl --tags This format is a simple example of how formats can be used to create reports. It displays each tag, and a count of how many entries in which tag appears in your journal (or in the search results), sorted by most frequent. Example output: @one : 32 @two : 17 @three : 4 Options Exporting with --file Example: jrnl --format json --file /some/path/to/a/file.txt By default, jrnl will output entries to your terminal. But if you provide --file along with a filename, the same output that would have been to your terminal will be written to the file instead. This is the same as piping the output to a file. So, in bash for example, the following two statements are equivalent: jrnl --format json --file myjournal.json jrnl --format json > myjournal.json Exporting to directories If the --file argument is a directory, jrnl will export each entry into an individual file: jrnl --format json --file my_entries/ The contents of my_entries/ will then look like this: my_entries/ |- 2013_06_03_a-beautiful-day.json |- 2013_06_07_dinner-with-gabriel.json |- ...","title":"Formats"},{"location":"formats/#formats","text":"jrnl supports a variety of alternate formats. These can be used to display your journal in a different manner than the jrnl default, and can even be used to pipe data from your journal for use in another program to create reports, or do whatever you want with your jrnl data. Any of these formats can be used with a search (e.g. jrnl -contains \"lorem ipsum\" --format json ) to display the results of that search in the given format, or can be used alone (e.g. jrnl --format json ) to display all entries from the selected journal. This page shows examples of all the built-in formats, but since jrnl supports adding more formats through plugins, you may have more available on your system. Please see jrnl --help for a list of which formats are available on your system. Any of these formats can be used interchangeably, and are only grouped into \"display\", \"data\", and \"report\" formats below for convenience.","title":"Formats"},{"location":"formats/#display-formats","text":"These formats are mainly intended for displaying your journal in the terminal. Even so, they can still be used in the same way as any other format (like written to a file, if you choose).","title":"Display Formats"},{"location":"formats/#pretty","text":"jrnl --format pretty # or jrnl -1 # any search This is the default format in jrnl . If no --format is given, pretty will be used. It displays the timestamp of each entry formatted to by the user config followed by the title on the same line. Then the body of the entry is shown below. This format is configurable through these values from your config file (see Advanced Usage for more details): colors body date tags title indent_character linewrap timeformat Example output : 2020-06-28 18:22 This is the first sample entry | This is the sample body text of the first sample entry. 2020-07-01 20:00 This is the second sample entry | This is the sample body text of the second sample entry, but this one has a @tag. 2020-07-02 09:00 This is the third sample entry | This is the sample body text of the third sample entry.","title":"Pretty"},{"location":"formats/#short","text":"jrnl --format short # or jrnl --short This will shorten entries to display only the date and title. It is essentially the pretty format but without the body of each entry. This can be useful if you have long journal entries and only want to see a list of entries that match your search. Example output : 2020-06-28 18:22 This is the first sample entry 2020-07-01 20:00 This is the second sample entry 2020-07-02 09:00 This is the third sample entry","title":"Short"},{"location":"formats/#fancy-or-boxed","text":"jrnl --format fancy # or jrnl --format boxed This format outlines each entry with a border. This makes it much easier to tell where each entry starts and ends. It's an example of how free-form the formats can be, and also just looks kinda ~ ~fancy~ ~, if you're into that kind of thing. Example output : \u250e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e2020-06-28 18:22 \u2503 This is the first sample entry \u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555 \u2520\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524 \u2503 This is the sample body text of the first sample entry. \u2502 \u2516\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e2020-07-01 20:00 \u2503 This is the second sample entry \u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555 \u2520\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524 \u2503 This is the sample body text of the second sample entry, but this one has a @tag. \u2502 \u2516\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u250e\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e2020-07-02 09:00 \u2503 This is the third sample entry \u2558\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2555 \u2520\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524 \u2503 This is the sample body text of the third sample entry. \u2502 \u2516\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518","title":"Fancy (or Boxed)"},{"location":"formats/#data-formats","text":"These formats are mainly intended for piping or exporting your journal to other programs. Even so, they can still be used in the same way as any other format (like written to a file, or displayed in your terminal, if you want).","title":"Data Formats"},{"location":"formats/#json","text":"jrnl --format json JSON is a very handy format used by many programs and has support in nearly every programming language. There are many things you could do with JSON data. Maybe you could use jq to filter through the fields in your journal. Like this: $ j -3 --format json | jq '.entries[].date' jrnl-GFqVlfgP-py3.8 \ue73c \"2020-06-28\" \"2020-07-01\" \"2020-07-02\" Or why not create a beautiful timeline of your journal? Example output : { \"tags\": { \"@tag\": 1 }, \"entries\": [ { \"title\": \"This is the first sample entry\", \"body\": \"This is the sample body text of the first sample entry.\", \"date\": \"2020-06-28\", \"time\": \"18:22\", \"tags\": [], \"starred\": false }, { \"title\": \"This is the second sample entry\", \"body\": \"This is the sample body text of the second sample entry, but this one has a @tag.\", \"date\": \"2020-07-01\", \"time\": \"20:00\", \"tags\": [ \"@tag\" ], \"starred\": false }, { \"title\": \"This is the third sample entry\", \"body\": \"This is the sample body text of the third sample entry.\", \"date\": \"2020-07-02\", \"time\": \"09:00\", \"tags\": [], \"starred\": false } ] }","title":"JSON"},{"location":"formats/#markdown","text":"jrnl --format markdown # or jrnl --format md Markdown is a simple markup language that is human readable and can be used to be rendered to other formats (html, pdf). jrnl 's README for example is formatted in markdown, then Github adds some formatting to make it look nice. The markdown format groups entries by date (first by year, then by month), and adds header markings as needed (e.g. # , ## , etc). If you already have markdown header markings in your journal, they will be incremented as necessary to make them fit under these new headers (i.e. # will become ## ). This format can be very useful, for example, to export a journal to a program that converts markdown to html to make a website or a blog from your journal. Example output : # 2020 ## June ### 2020-06-28 18:22 This is the first sample entry This is the sample body text of the first sample entry. ## July ### 2020-07-01 20:00 This is the second sample entry This is the sample body text of the second sample entry, but this one has a @tag. ### 2020-07-02 09:00 This is the third sample entry This is the sample body text of the third sample entry.","title":"Markdown"},{"location":"formats/#plain-text","text":"jrnl --format text # or jrnl --format txt This outputs your journal in the same plain-text format that jrnl uses to store your journal on disk. This format is particularly useful for importing and exporting journals within jrnl . You can use it, for example, to move entries from one journal to another, or to create a new journal with search results from another journal. Example output : [2020-06-28 18:22] This is the first sample entry This is the sample body text of the first sample entry. [2020-07-01 20:00] This is the second sample entry This is the sample body text of the second sample entry, but this one has a @tag. [2020-07-02 09:00] This is the third sample entry This is the sample body text of the third sample entry.","title":"Plain Text"},{"location":"formats/#xml","text":"jrnl --format xml This outputs your journal into XML format. XML is a commonly used data format and is supported by many programs and programming languages. Example output : <?xml version=\"1.0\" ?> <journal> <entries> <entry date=\"2020-06-28T18:22:00\" starred=\"\">This is the first sample entry This is the sample body text of the first sample entry.</entry> <entry date=\"2020-07-01T20:00:00\" starred=\"\"> <tag name=\"@tag\"/> This is the second sample entry This is the sample body text of the second sample entry, but this one has a @tag. </entry> <entry date=\"2020-07-02T09:00:00\" starred=\"\">*This is the third sample entry, and is starred This is the sample body text of the third sample entry.</entry> </entries> <tags> <tag name=\"@tag\">1</tag> </tags> </journal>","title":"XML"},{"location":"formats/#yaml","text":"jrnl --format yaml This outputs your journal into YAML format. YAML is a commonly used data format and is supported by many programs and programming languages. Example output : title: This is the second sample entry date: 2020-07-01 20:00 starred: False tags: tag This is the sample body text of the second sample entry, but this one has a @tag.","title":"YAML"},{"location":"formats/#report-formats","text":"Since formats use your journal data and display it in different ways, they can also be used to create reports.","title":"Report formats"},{"location":"formats/#tags","text":"jrnl --format tags # or jrnl --tags This format is a simple example of how formats can be used to create reports. It displays each tag, and a count of how many entries in which tag appears in your journal (or in the search results), sorted by most frequent. Example output: @one : 32 @two : 17 @three : 4","title":"Tags"},{"location":"formats/#options","text":"","title":"Options"},{"location":"formats/#exporting-with-file","text":"Example: jrnl --format json --file /some/path/to/a/file.txt By default, jrnl will output entries to your terminal. But if you provide --file along with a filename, the same output that would have been to your terminal will be written to the file instead. This is the same as piping the output to a file. So, in bash for example, the following two statements are equivalent: jrnl --format json --file myjournal.json jrnl --format json > myjournal.json","title":"Exporting with --file"},{"location":"formats/#exporting-to-directories","text":"If the --file argument is a directory, jrnl will export each entry into an individual file: jrnl --format json --file my_entries/ The contents of my_entries/ will then look like this: my_entries/ |- 2013_06_03_a-beautiful-day.json |- 2013_06_07_dinner-with-gabriel.json |- ...","title":"Exporting to directories"},{"location":"installation/","text":"Getting started Installation On Mac and Linux, the easiest way to install jrnl is using Homebrew : brew install jrnl On other platforms, install jrnl using Python 3.6+ and pipx : pipx install jrnl The first time you run jrnl you will be asked where your journal file should be created and whether you wish to encrypt it. Quickstart To make a new entry, just type jrnl yesterday: Called in sick. Used the time to clean the house and spent 4h on writing my book. and hit return. yesterday: will be interpreted as a time stamp. Everything until the first sentence mark ( .?!: ) will be interpreted as the title, the rest as the body. In your journal file, the result will look like this: 2012-03-29 09:00 Called in sick. Used the time to clean the house and spent 4h on writing my book. If you just call jrnl , you will be prompted to compose your entry - but you can also configure jrnl to use your external editor.","title":"Quickstart"},{"location":"installation/#getting-started","text":"","title":"Getting started"},{"location":"installation/#installation","text":"On Mac and Linux, the easiest way to install jrnl is using Homebrew : brew install jrnl On other platforms, install jrnl using Python 3.6+ and pipx : pipx install jrnl The first time you run jrnl you will be asked where your journal file should be created and whether you wish to encrypt it.","title":"Installation"},{"location":"installation/#quickstart","text":"To make a new entry, just type jrnl yesterday: Called in sick. Used the time to clean the house and spent 4h on writing my book. and hit return. yesterday: will be interpreted as a time stamp. Everything until the first sentence mark ( .?!: ) will be interpreted as the title, the rest as the body. In your journal file, the result will look like this: 2012-03-29 09:00 Called in sick. Used the time to clean the house and spent 4h on writing my book. If you just call jrnl , you will be prompted to compose your entry - but you can also configure jrnl to use your external editor.","title":"Quickstart"},{"location":"overview/","text":"Overview jrnl is a simple journal application for the command line. You can use it to easily create, search, and view journal entries. Journals are stored as human-readable plain text, and can also be encrypted using AES encryption . jrnl has most of the features you need, and few of the ones you don't. Plain Text jrnl stores each journal in plain text. You can store jrnl files anywhere, including in shared folders to keep them synchronized between devices. Journal files are compact (thousands of entries take up less than 1 MiB) and can be read by almost any electronic device, now and for the foreseeable future. Tags To make it easier to find entries later, jrnl includes support for inline tags (the default tag symbol is @ ). You can find and filter entries by using tags along with other search criteria. Support for Multiple Journals jrnl includes support for the creation of multiple journals, each of which can be stored as a single file or as a set of files. Entries are automatically timestamped in a human-readable format that makes it easy to view multiple entries at a time. jrnl can easily find the entries you want so that you can read them or edit them. Support for External Editors jrnl plays nicely with your favorite text editor. You may prefer to write journal entries in an editor. Or you may want to make changes that require a more comprehensive application. jrnl can filter specific entries and pass them to the external editor of your choice. Encryption jrnl includes support for AES encryption . See the encryption page for more information. Import and Export jrnl makes it easy to import entries from other sources. Existing entries can be exported in a variety of formats . Multi-Platform Support jrnl is compatible with most operating systems. You can download it using one of a variety of package managers, or you can build from source. Open-Source jrnl is written in Python and maintained by a friendly community of open-source software enthusiasts.","title":"Overview"},{"location":"overview/#overview","text":"jrnl is a simple journal application for the command line. You can use it to easily create, search, and view journal entries. Journals are stored as human-readable plain text, and can also be encrypted using AES encryption . jrnl has most of the features you need, and few of the ones you don't.","title":"Overview"},{"location":"overview/#plain-text","text":"jrnl stores each journal in plain text. You can store jrnl files anywhere, including in shared folders to keep them synchronized between devices. Journal files are compact (thousands of entries take up less than 1 MiB) and can be read by almost any electronic device, now and for the foreseeable future.","title":"Plain Text"},{"location":"overview/#tags","text":"To make it easier to find entries later, jrnl includes support for inline tags (the default tag symbol is @ ). You can find and filter entries by using tags along with other search criteria.","title":"Tags"},{"location":"overview/#support-for-multiple-journals","text":"jrnl includes support for the creation of multiple journals, each of which can be stored as a single file or as a set of files. Entries are automatically timestamped in a human-readable format that makes it easy to view multiple entries at a time. jrnl can easily find the entries you want so that you can read them or edit them.","title":"Support for Multiple Journals"},{"location":"overview/#support-for-external-editors","text":"jrnl plays nicely with your favorite text editor. You may prefer to write journal entries in an editor. Or you may want to make changes that require a more comprehensive application. jrnl can filter specific entries and pass them to the external editor of your choice.","title":"Support for External Editors"},{"location":"overview/#encryption","text":"jrnl includes support for AES encryption . See the encryption page for more information.","title":"Encryption"},{"location":"overview/#import-and-export","text":"jrnl makes it easy to import entries from other sources. Existing entries can be exported in a variety of formats .","title":"Import and Export"},{"location":"overview/#multi-platform-support","text":"jrnl is compatible with most operating systems. You can download it using one of a variety of package managers, or you can build from source.","title":"Multi-Platform Support"},{"location":"overview/#open-source","text":"jrnl is written in Python and maintained by a friendly community of open-source software enthusiasts.","title":"Open-Source"},{"location":"privacy-and-security/","text":"Privacy and Security jrnl is designed with privacy and security in mind, but like any other program there are some limitations to be aware of. Password strength jrnl doesn't enforce password strength requirements. Short or commonly-used passwords can be easily circumvented by someone with basic security skills to access to your encrypted jrnl file. Shell history Since you can enter entries from the command line, any tool that logs command line actions is a potential security risk. See below for how to deal with this problem in various shells. bash You can disable history logging for jrnl by adding this line into your ~/.bashrc file: HISTIGNORE=\"$HISTIGNORE:jrnl *\" To delete existing jrnl commands from bash history, simply delete them from your bash history file. The default location of this file is ~/.bash_history , but you can run echo \"$HISTFILE\" to find it if needed. Also, you can run history -c to delete all commands from your history. zsh You can disable history logging for jrnl by adding this to your ~/.zshrc file: setopt HIST_IGNORE_SPACE alias jrnl=\" jrnl\" To delete existing jrnl commands from zsh history, simply remove them from your zsh history file. The default location of this file is ~/.zsh_history , but you can run echo \"$HISTFILE\" to find it if needed. Also, you can run history -c to delete all commands from your history. fish By default fish will not log any command that starts with a space. If you want to always run jrnl with a space before it, then you can add this to your ~/.config/fish/config.fish file: abbr --add jrnl \" jrnl\" To delete existing jrnl commands from fish history, run history delete --prefix 'jrnl ' . Windows Command Prompt Windows doesn't log history to disk, but it does keep it in your command prompt session. Close the command prompt or press Alt + F7 to clear your history after journaling. Files in transit from editor to jrnl When creating or editing an entry, jrnl uses a unencrypted temporary file on disk in order to give your editor access to your journal. After you close your editor, jrnl then deletes this temporary file. So, if you have saved a journal entry but haven't closed your editor yet, the unencrypted temporary remains on your disk. If your computer were to shut off during this time, or the jrnl process were killed unexpectedly, then the unencrypted temporary file will remain on your disk. You can mitigate this issue by only saving with your editor right before closing it. You can also manually delete these files (i.e. files named jrnl_*.txt ) from your temporary folder. Plausible deniability You may be able to hide the contents of your journal behind a layer of encryption, but if someone has access to your configuration file, then they can figure out that you have a journal, where that journal file is, and when you last edited it. With a sufficient power imbalance, someone may be able to force you to unencrypt it through non-technical means. Notice any other risks? Please let the maintainers know by filing an issue on GitHub .","title":"Privacy and Security"},{"location":"privacy-and-security/#privacy-and-security","text":"jrnl is designed with privacy and security in mind, but like any other program there are some limitations to be aware of.","title":"Privacy and Security"},{"location":"privacy-and-security/#password-strength","text":"jrnl doesn't enforce password strength requirements. Short or commonly-used passwords can be easily circumvented by someone with basic security skills to access to your encrypted jrnl file.","title":"Password strength"},{"location":"privacy-and-security/#shell-history","text":"Since you can enter entries from the command line, any tool that logs command line actions is a potential security risk. See below for how to deal with this problem in various shells.","title":"Shell history"},{"location":"privacy-and-security/#bash","text":"You can disable history logging for jrnl by adding this line into your ~/.bashrc file: HISTIGNORE=\"$HISTIGNORE:jrnl *\" To delete existing jrnl commands from bash history, simply delete them from your bash history file. The default location of this file is ~/.bash_history , but you can run echo \"$HISTFILE\" to find it if needed. Also, you can run history -c to delete all commands from your history.","title":"bash"},{"location":"privacy-and-security/#zsh","text":"You can disable history logging for jrnl by adding this to your ~/.zshrc file: setopt HIST_IGNORE_SPACE alias jrnl=\" jrnl\" To delete existing jrnl commands from zsh history, simply remove them from your zsh history file. The default location of this file is ~/.zsh_history , but you can run echo \"$HISTFILE\" to find it if needed. Also, you can run history -c to delete all commands from your history.","title":"zsh"},{"location":"privacy-and-security/#fish","text":"By default fish will not log any command that starts with a space. If you want to always run jrnl with a space before it, then you can add this to your ~/.config/fish/config.fish file: abbr --add jrnl \" jrnl\" To delete existing jrnl commands from fish history, run history delete --prefix 'jrnl ' .","title":"fish"},{"location":"privacy-and-security/#windows-command-prompt","text":"Windows doesn't log history to disk, but it does keep it in your command prompt session. Close the command prompt or press Alt + F7 to clear your history after journaling.","title":"Windows Command Prompt"},{"location":"privacy-and-security/#files-in-transit-from-editor-to-jrnl","text":"When creating or editing an entry, jrnl uses a unencrypted temporary file on disk in order to give your editor access to your journal. After you close your editor, jrnl then deletes this temporary file. So, if you have saved a journal entry but haven't closed your editor yet, the unencrypted temporary remains on your disk. If your computer were to shut off during this time, or the jrnl process were killed unexpectedly, then the unencrypted temporary file will remain on your disk. You can mitigate this issue by only saving with your editor right before closing it. You can also manually delete these files (i.e. files named jrnl_*.txt ) from your temporary folder.","title":"Files in transit from editor to jrnl"},{"location":"privacy-and-security/#plausible-deniability","text":"You may be able to hide the contents of your journal behind a layer of encryption, but if someone has access to your configuration file, then they can figure out that you have a journal, where that journal file is, and when you last edited it. With a sufficient power imbalance, someone may be able to force you to unencrypt it through non-technical means.","title":"Plausible deniability"},{"location":"privacy-and-security/#notice-any-other-risks","text":"Please let the maintainers know by filing an issue on GitHub .","title":"Notice any other risks?"},{"location":"recipes/","text":"FAQ Recipes Co-occurrence of tags If I want to find out how often I mentioned my flatmates Alberto and Melo in the same entry, I run jrnl @alberto --tags | grep @melo And will get something like @melo: 9 , meaning there are 9 entries where both @alberto and @melo are tagged. How does this work? First, jrnl @alberto will filter the journal to only entries containing the tag @alberto , and then the --tags option will print out how often each tag occurred in this filtered journal. Finally, we pipe this to grep which will only display the line containing @melo . Combining filters You can do things like jrnl @fixed -starred -n 10 -to \"jan 2013\" --short To get a short summary of the 10 most recent, favourited entries before January 1, 2013 that are tagged with @fixed . Statistics How much did I write last year? jrnl -from \"jan 1 2013\" -to \"dec 31 2013\" | wc -w Will give you the number of words you wrote in 2013. How long is my average entry? expr $(jrnl --export text | wc -w) / $(jrnl --short | wc -l) This will first get the total number of words in the journal and divide it by the number of entries (this works because jrnl --short will print exactly one line per entry). Importing older files If you want to import a file as an entry to jrnl, you can just do jrnl < entry.ext . But what if you want the modification date of the file to be the date of the entry in jrnl? Try this echo `stat -f %Sm -t '%d %b %Y at %H:%M: ' entry.txt` `cat entry.txt` | jrnl The first part will format the modification date of entry.txt , and then combine it with the contents of the file before piping it to jrnl. If you do that often, consider creating a function in your .bashrc or .bash_profile jrnlimport () { echo `stat -f %Sm -t '%d %b %Y at %H:%M: ' $1` `cat $1` | jrnl } Using templates Note Templates require an external editor be configured. A template is a code snippet that makes it easier to use repeated text each time a new journal entry is started. There are two ways you can utilize templates in your entries. 1. Command line arguments If you had a template.txt file with the following contents: My Personal Journal Title: Body: The template.txt file could be used to create a new entry with these command line arguements: jrnl < template.txt # Imports template.txt as the most recent entry jrnl -1 --edit # Opens the most recent entry in the editor 2. Include the template file in jrnl.yaml A more efficient way to work with a template file is to declare the file in your config file by changing the template setting from false to the template file's path in double quotes: ... template: \"/path/to/template.txt\" ... Changes can be saved as you continue writing the journal entry and will be logged as a new entry in the journal you specified in the original argument. Tip To read your journal entry or to verify the entry saved, you can use this command: jrnl -n 1 (Check out Formats for more options). jrnl -n 1 Prompts on shell reload If you'd like to be prompted each time you refresh your shell, you can include this in your .bash_profile : function log_question() { echo $1 read jrnl today: ${1}. $REPLY } log_question 'What did I achieve today?' log_question 'What did I make progress with?' Whenever your shell is reloaded, you will be prompted to answer each of the questions in the example above. Each answer will be logged as a separate journal entry at the default_hour and default_minute listed in your jrnl.yaml config file . Display random entry You can use this to select one title at random and then display the whole entry. The invocation of cut needs to match the format of the timestamp. For timestamps that have a space between data and time components, select fields 1 and 2 as shown. For timestamps that have no whitespace, select only field 1. jrnl -on \"$(jrnl --short | shuf -n 1 | cut -d' ' -f1,2)\" External editors Configure your preferred external editor by updating the editor option in your jrnl.yaml file. (See advanced usage for details). Note To save and log any entry edits, save and close the file. Sublime Text To use Sublime Text, install the command line tools for Sublime Text and configure your jrnl.yaml like this: editor: \"subl -w\" Note the -w flag to make sure jrnl waits for Sublime Text to close the file before writing into the journal. MacVim Similar to Sublime Text, MacVim must be started with a flag that tells the the process to wait until the file is closed before passing control back to journal. In the case of MacVim, this is -f : editor: \"mvim -f\" iA Writer On OS X, you can use the fabulous iA Writer to write entries. Configure your jrnl.yaml like this: editor: \"open -b pro.writer.mac -Wn\" What does this do? open -b ... opens a file using the application identified by the bundle identifier (a unique string for every app out there). -Wn tells the application to wait until it's closed before passing back control, and to use a new instance of the application. If the pro.writer.mac bundle identifier is not found on your system, you can find the right string to use by inspecting iA Writer's Info.plist file in your shell: grep -A 1 CFBundleIdentifier /Applications/iA\\ Writer.app/Contents/Info.plist Notepad++ on Windows To set Notepad++ as your editor, edit the jrnl config file ( jrnl.yaml ) like this: editor: \"C:\\\\Program Files (x86)\\\\Notepad++\\\\notepad++.exe -multiInst -nosession\" The double backslashes are needed so jrnl can read the file path correctly. The -multiInst -nosession options will cause jrnl to open its own Notepad++ window. Visual Studio Code To set Visual Studo Code as your editor on Linux, edit jrnl.yaml like this: editor: \"/usr/bin/code --wait\" The --wait argument tells VS Code to wait for files to be written out before handing back control to jrnl. On MacOS you will need to add VS Code to your PATH. You can do that by adding: export PATH=\"\\$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin\" to your .bash_profile , or by running the Install 'code' command in PATH command from the command pallet in VS Code. Then you can add: editor: \"code --wait\" to jrnl.yaml . See also the Visual Studio Code documentation","title":"Recipes"},{"location":"recipes/#faq","text":"","title":"FAQ"},{"location":"recipes/#recipes","text":"","title":"Recipes"},{"location":"recipes/#co-occurrence-of-tags","text":"If I want to find out how often I mentioned my flatmates Alberto and Melo in the same entry, I run jrnl @alberto --tags | grep @melo And will get something like @melo: 9 , meaning there are 9 entries where both @alberto and @melo are tagged. How does this work? First, jrnl @alberto will filter the journal to only entries containing the tag @alberto , and then the --tags option will print out how often each tag occurred in this filtered journal. Finally, we pipe this to grep which will only display the line containing @melo .","title":"Co-occurrence of tags"},{"location":"recipes/#combining-filters","text":"You can do things like jrnl @fixed -starred -n 10 -to \"jan 2013\" --short To get a short summary of the 10 most recent, favourited entries before January 1, 2013 that are tagged with @fixed .","title":"Combining filters"},{"location":"recipes/#statistics","text":"How much did I write last year? jrnl -from \"jan 1 2013\" -to \"dec 31 2013\" | wc -w Will give you the number of words you wrote in 2013. How long is my average entry? expr $(jrnl --export text | wc -w) / $(jrnl --short | wc -l) This will first get the total number of words in the journal and divide it by the number of entries (this works because jrnl --short will print exactly one line per entry).","title":"Statistics"},{"location":"recipes/#importing-older-files","text":"If you want to import a file as an entry to jrnl, you can just do jrnl < entry.ext . But what if you want the modification date of the file to be the date of the entry in jrnl? Try this echo `stat -f %Sm -t '%d %b %Y at %H:%M: ' entry.txt` `cat entry.txt` | jrnl The first part will format the modification date of entry.txt , and then combine it with the contents of the file before piping it to jrnl. If you do that often, consider creating a function in your .bashrc or .bash_profile jrnlimport () { echo `stat -f %Sm -t '%d %b %Y at %H:%M: ' $1` `cat $1` | jrnl }","title":"Importing older files"},{"location":"recipes/#using-templates","text":"Note Templates require an external editor be configured. A template is a code snippet that makes it easier to use repeated text each time a new journal entry is started. There are two ways you can utilize templates in your entries.","title":"Using templates"},{"location":"recipes/#1-command-line-arguments","text":"If you had a template.txt file with the following contents: My Personal Journal Title: Body: The template.txt file could be used to create a new entry with these command line arguements: jrnl < template.txt # Imports template.txt as the most recent entry jrnl -1 --edit # Opens the most recent entry in the editor","title":"1. Command line arguments"},{"location":"recipes/#2-include-the-template-file-in-jrnlyaml","text":"A more efficient way to work with a template file is to declare the file in your config file by changing the template setting from false to the template file's path in double quotes: ... template: \"/path/to/template.txt\" ... Changes can be saved as you continue writing the journal entry and will be logged as a new entry in the journal you specified in the original argument. Tip To read your journal entry or to verify the entry saved, you can use this command: jrnl -n 1 (Check out Formats for more options). jrnl -n 1","title":"2. Include the template file in jrnl.yaml"},{"location":"recipes/#prompts-on-shell-reload","text":"If you'd like to be prompted each time you refresh your shell, you can include this in your .bash_profile : function log_question() { echo $1 read jrnl today: ${1}. $REPLY } log_question 'What did I achieve today?' log_question 'What did I make progress with?' Whenever your shell is reloaded, you will be prompted to answer each of the questions in the example above. Each answer will be logged as a separate journal entry at the default_hour and default_minute listed in your jrnl.yaml config file .","title":"Prompts on shell reload"},{"location":"recipes/#display-random-entry","text":"You can use this to select one title at random and then display the whole entry. The invocation of cut needs to match the format of the timestamp. For timestamps that have a space between data and time components, select fields 1 and 2 as shown. For timestamps that have no whitespace, select only field 1. jrnl -on \"$(jrnl --short | shuf -n 1 | cut -d' ' -f1,2)\"","title":"Display random entry"},{"location":"recipes/#external-editors","text":"Configure your preferred external editor by updating the editor option in your jrnl.yaml file. (See advanced usage for details). Note To save and log any entry edits, save and close the file.","title":"External editors"},{"location":"recipes/#sublime-text","text":"To use Sublime Text, install the command line tools for Sublime Text and configure your jrnl.yaml like this: editor: \"subl -w\" Note the -w flag to make sure jrnl waits for Sublime Text to close the file before writing into the journal.","title":"Sublime Text"},{"location":"recipes/#macvim","text":"Similar to Sublime Text, MacVim must be started with a flag that tells the the process to wait until the file is closed before passing control back to journal. In the case of MacVim, this is -f : editor: \"mvim -f\"","title":"MacVim"},{"location":"recipes/#ia-writer","text":"On OS X, you can use the fabulous iA Writer to write entries. Configure your jrnl.yaml like this: editor: \"open -b pro.writer.mac -Wn\" What does this do? open -b ... opens a file using the application identified by the bundle identifier (a unique string for every app out there). -Wn tells the application to wait until it's closed before passing back control, and to use a new instance of the application. If the pro.writer.mac bundle identifier is not found on your system, you can find the right string to use by inspecting iA Writer's Info.plist file in your shell: grep -A 1 CFBundleIdentifier /Applications/iA\\ Writer.app/Contents/Info.plist","title":"iA Writer"},{"location":"recipes/#notepad-on-windows","text":"To set Notepad++ as your editor, edit the jrnl config file ( jrnl.yaml ) like this: editor: \"C:\\\\Program Files (x86)\\\\Notepad++\\\\notepad++.exe -multiInst -nosession\" The double backslashes are needed so jrnl can read the file path correctly. The -multiInst -nosession options will cause jrnl to open its own Notepad++ window.","title":"Notepad++ on Windows"},{"location":"recipes/#visual-studio-code","text":"To set Visual Studo Code as your editor on Linux, edit jrnl.yaml like this: editor: \"/usr/bin/code --wait\" The --wait argument tells VS Code to wait for files to be written out before handing back control to jrnl. On MacOS you will need to add VS Code to your PATH. You can do that by adding: export PATH=\"\\$PATH:/Applications/Visual Studio Code.app/Contents/Resources/app/bin\" to your .bash_profile , or by running the Install 'code' command in PATH command from the command pallet in VS Code. Then you can add: editor: \"code --wait\" to jrnl.yaml . See also the Visual Studio Code documentation","title":"Visual Studio Code"},{"location":"usage/","text":"Basic Usage jrnl has two modes: composing and viewing . Whenever you don't enter any arguments that start with a dash ( - ) or double-dash ( -- ), you're in composing mode, meaning that you can write your entry on the command line. We intentionally break a convention on command line arguments: all arguments starting with a single dash ( - ) will filter your journal before viewing it. Filter arguments can be combined arbitrarily. Arguments with a double dash ( -- ) will control how your journal is displayed or exported. Control arguments are mutually exclusive (i.e., you can only specify one way to display or export your journal at a time). For a list of commands, enter jrnl --help . Composing Entries Composing mode is entered by either starting jrnl without any arguments -- which will launch an external editor -- or by just writing an entry on the command line: jrnl today at 3am: I just met Steve Buscemi in a bar! What a nice guy. Note Most shells contain a certain number of reserved characters, such as # and * . These characters, as well as unbalanced single or double quotation marks, parentheses, and others, likely will cause problems. Although reserved characters can be escaped using \\ , this is not ideal for long-form writing. The solution: first enter jrnl and hit return . You can then enter the text of your journal entry. Alternatively, you can use an external editor ). You can also import an entry directly from a file: jrnl < my_entry.txt Specifying Date and Time If you don't specify a date and time (e.g., jrnl finished writing letter to brother ), jrnl will create an entry using the current date and time. For retrospective entries, you can use a timestamp to tell jrnl where to put the entry. Timestamps can be entered using a variety of formats. Here are some that work: at 6am yesterday last monday sunday at noon 2 march 2012 7 apr 5/20/1998 at 23:42 2020-05-22T15:55-04:00 If you don't use a timestamp, jrnl will create an entry using the current time. If you use a date only (no time), jrnl will use the default time specified in your configuration file (see advanced usage ). Behind the scenes, jrnl reorganizes entries in chronological order. Using Tags jrnl supports tags. The default tag symbol is @ (largely because # is a reserved character). You can specify your own tag symbol in the configuration file. To use tags, preface the desired tag with the symbol: jrnl Had a wonderful day at the @beach with @Tom and @Anna. Although you can use capitals while tagging an entry, searches by tag are case-insensitive. There is no limit to how many tags you can use in an entry. Starring Entries To mark an entry as a favorite, simply \"star\" it using an asterisk ( * ): jrnl last sunday *: Best day of my life. If you don't want to add a date (i.e., you want the date to be entered as now ), the following options are equivalent: jrnl *: Best day of my life. jrnl *Best day of my life. jrnl Best day of my life.* Note Make sure that the asterisk ( * ) is not surrounded by whitespaces. jrnl Best day of my life! * will not work because the * character has a special meaning in most shells. Viewing and Searching Entries jrnl can display entries in a variety of ways. To view all entries, enter: jrnl -to today jrnl provides several filtering commands, prefaced by a single dash ( - ), that allow you to find a more specific range of entries. For example, jrnl -n 10 lists the ten most recent entries. jrnl -10 is even more concise and works the same way. If you want to see all of the entries you wrote from the beginning of last year until the end of this past March, you would enter jrnl -from \"last year\" -to march Filter criteria that use more than one word require surrounding quotes ( \"\" ). To see entries on a particular date, use -on : jrnl -on yesterday Text Search The -contains command displays all entries containing the text you enter after it. This may be helpful when you're searching for entries and you can't remember if you tagged any words when you wrote them. You may realize that you use a word a lot and want to turn it into a tag in all of your previous entries. jrnl -contains \"dogs\" --edit opens your external editor so that you can add a tag symbol ( @ by default) to all instances of the word \"dogs.\" Filtering by Tag You can filter your journal entries by tag. For example, jrnl @pinkie @WorldDomination displays all entries in which either @pinkie or @WorldDomination occurred. Tag filters can be combined with other filters: jrnl -n 5 @pinkie -and @WorldDomination displays the last five entries containing both @pinkie and @worldDomination . You can change which symbols you'd like to use for tagging in the configuration. Note Entering jrnl @pinkie @WorldDomination will display entries in which both tags are present because, although no command line arguments are given, all of the input strings look like tags. jrnl will assume you want to filter by tag, rather than create a new entry that consists only of tags. To view a list of all tags in the journal, enter: jrnl --tags Viewing Starred Entries To display only your favorite (starred) entries, enter jrnl -starred Editing Entries You can edit entries after writing them. This is particularly useful when your journal file is encrypted. To use this feature, you need to have an external editor configured in your configuration file. You can also edit only the entries that match specific search criteria. For example, jrnl -to 1950 @texas -and @history --edit opens your external editor displaying all entries tagged with @texas and @history that were written before 1950. After making changes, save and close the file, and only those entries will be modified (and encrypted, if applicable). If you are using multiple journals, it's easy to edit specific entries from specific journals. Simply prefix the filter string with the name of the journal. For example, jrnl work -n 1 --edit opens the most recent entry in the 'work' journal in your external editor. Deleting Entries The --delete command opens an interactive interface for deleting entries. The date and title of each entry in the journal are presented one at a time, and you can choose whether to keep or delete each entry. If no filters are specified, jrnl will ask you to keep or delete each entry in the entire journal, one by one. If there are a lot of entries in the journal, it may be more efficient to filter entries before passing the --delete command. Here's an example. Say you have a journal into which you've imported the last 12 years of blog posts. You use the @book tag a lot, and for some reason you want to delete some, but not all, of the entries in which you used that tag, but only the ones you wrote at some point in 2004 or earlier. You're not sure which entries you want to keep, and you want to look through them before deciding. This is what you might enter: jrnl -to 2004 @book --delete jrnl will show you only the relevant entries, and you can choose the ones you want to delete. You may want to delete all of the entries containing @book that you wrote in 2004 or earlier. If there are dozens or hundreds, the easiest way would be to use an external editor. Open an editor with the entries you want to delete... jrnl -to 2004 @book --edit ...select everything, delete it, save and close, and all of those entries are removed from the journal. Listing Journals To list all of your journals: jrnl --list The journals displayed correspond to those specified in the jrnl configuration file.","title":"Basic Usage"},{"location":"usage/#basic-usage","text":"jrnl has two modes: composing and viewing . Whenever you don't enter any arguments that start with a dash ( - ) or double-dash ( -- ), you're in composing mode, meaning that you can write your entry on the command line. We intentionally break a convention on command line arguments: all arguments starting with a single dash ( - ) will filter your journal before viewing it. Filter arguments can be combined arbitrarily. Arguments with a double dash ( -- ) will control how your journal is displayed or exported. Control arguments are mutually exclusive (i.e., you can only specify one way to display or export your journal at a time). For a list of commands, enter jrnl --help .","title":"Basic Usage"},{"location":"usage/#composing-entries","text":"Composing mode is entered by either starting jrnl without any arguments -- which will launch an external editor -- or by just writing an entry on the command line: jrnl today at 3am: I just met Steve Buscemi in a bar! What a nice guy. Note Most shells contain a certain number of reserved characters, such as # and * . These characters, as well as unbalanced single or double quotation marks, parentheses, and others, likely will cause problems. Although reserved characters can be escaped using \\ , this is not ideal for long-form writing. The solution: first enter jrnl and hit return . You can then enter the text of your journal entry. Alternatively, you can use an external editor ). You can also import an entry directly from a file: jrnl < my_entry.txt","title":"Composing Entries"},{"location":"usage/#specifying-date-and-time","text":"If you don't specify a date and time (e.g., jrnl finished writing letter to brother ), jrnl will create an entry using the current date and time. For retrospective entries, you can use a timestamp to tell jrnl where to put the entry. Timestamps can be entered using a variety of formats. Here are some that work: at 6am yesterday last monday sunday at noon 2 march 2012 7 apr 5/20/1998 at 23:42 2020-05-22T15:55-04:00 If you don't use a timestamp, jrnl will create an entry using the current time. If you use a date only (no time), jrnl will use the default time specified in your configuration file (see advanced usage ). Behind the scenes, jrnl reorganizes entries in chronological order.","title":"Specifying Date and Time"},{"location":"usage/#using-tags","text":"jrnl supports tags. The default tag symbol is @ (largely because # is a reserved character). You can specify your own tag symbol in the configuration file. To use tags, preface the desired tag with the symbol: jrnl Had a wonderful day at the @beach with @Tom and @Anna. Although you can use capitals while tagging an entry, searches by tag are case-insensitive. There is no limit to how many tags you can use in an entry.","title":"Using Tags"},{"location":"usage/#starring-entries","text":"To mark an entry as a favorite, simply \"star\" it using an asterisk ( * ): jrnl last sunday *: Best day of my life. If you don't want to add a date (i.e., you want the date to be entered as now ), the following options are equivalent: jrnl *: Best day of my life. jrnl *Best day of my life. jrnl Best day of my life.* Note Make sure that the asterisk ( * ) is not surrounded by whitespaces. jrnl Best day of my life! * will not work because the * character has a special meaning in most shells.","title":"Starring Entries"},{"location":"usage/#viewing-and-searching-entries","text":"jrnl can display entries in a variety of ways. To view all entries, enter: jrnl -to today jrnl provides several filtering commands, prefaced by a single dash ( - ), that allow you to find a more specific range of entries. For example, jrnl -n 10 lists the ten most recent entries. jrnl -10 is even more concise and works the same way. If you want to see all of the entries you wrote from the beginning of last year until the end of this past March, you would enter jrnl -from \"last year\" -to march Filter criteria that use more than one word require surrounding quotes ( \"\" ). To see entries on a particular date, use -on : jrnl -on yesterday","title":"Viewing and Searching Entries"},{"location":"usage/#text-search","text":"The -contains command displays all entries containing the text you enter after it. This may be helpful when you're searching for entries and you can't remember if you tagged any words when you wrote them. You may realize that you use a word a lot and want to turn it into a tag in all of your previous entries. jrnl -contains \"dogs\" --edit opens your external editor so that you can add a tag symbol ( @ by default) to all instances of the word \"dogs.\"","title":"Text Search"},{"location":"usage/#filtering-by-tag","text":"You can filter your journal entries by tag. For example, jrnl @pinkie @WorldDomination displays all entries in which either @pinkie or @WorldDomination occurred. Tag filters can be combined with other filters: jrnl -n 5 @pinkie -and @WorldDomination displays the last five entries containing both @pinkie and @worldDomination . You can change which symbols you'd like to use for tagging in the configuration. Note Entering jrnl @pinkie @WorldDomination will display entries in which both tags are present because, although no command line arguments are given, all of the input strings look like tags. jrnl will assume you want to filter by tag, rather than create a new entry that consists only of tags. To view a list of all tags in the journal, enter: jrnl --tags","title":"Filtering by Tag"},{"location":"usage/#viewing-starred-entries","text":"To display only your favorite (starred) entries, enter jrnl -starred","title":"Viewing Starred Entries"},{"location":"usage/#editing-entries","text":"You can edit entries after writing them. This is particularly useful when your journal file is encrypted. To use this feature, you need to have an external editor configured in your configuration file. You can also edit only the entries that match specific search criteria. For example, jrnl -to 1950 @texas -and @history --edit opens your external editor displaying all entries tagged with @texas and @history that were written before 1950. After making changes, save and close the file, and only those entries will be modified (and encrypted, if applicable). If you are using multiple journals, it's easy to edit specific entries from specific journals. Simply prefix the filter string with the name of the journal. For example, jrnl work -n 1 --edit opens the most recent entry in the 'work' journal in your external editor.","title":"Editing Entries"},{"location":"usage/#deleting-entries","text":"The --delete command opens an interactive interface for deleting entries. The date and title of each entry in the journal are presented one at a time, and you can choose whether to keep or delete each entry. If no filters are specified, jrnl will ask you to keep or delete each entry in the entire journal, one by one. If there are a lot of entries in the journal, it may be more efficient to filter entries before passing the --delete command. Here's an example. Say you have a journal into which you've imported the last 12 years of blog posts. You use the @book tag a lot, and for some reason you want to delete some, but not all, of the entries in which you used that tag, but only the ones you wrote at some point in 2004 or earlier. You're not sure which entries you want to keep, and you want to look through them before deciding. This is what you might enter: jrnl -to 2004 @book --delete jrnl will show you only the relevant entries, and you can choose the ones you want to delete. You may want to delete all of the entries containing @book that you wrote in 2004 or earlier. If there are dozens or hundreds, the easiest way would be to use an external editor. Open an editor with the entries you want to delete... jrnl -to 2004 @book --edit ...select everything, delete it, save and close, and all of those entries are removed from the journal.","title":"Deleting Entries"},{"location":"usage/#listing-journals","text":"To list all of your journals: jrnl --list The journals displayed correspond to those specified in the jrnl configuration file.","title":"Listing Journals"}]}